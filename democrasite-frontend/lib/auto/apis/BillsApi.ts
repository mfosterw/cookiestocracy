/* tslint:disable */
/* eslint-disable */
/**
 * Democrasite API
 * Documentation of API endpoints of Democrasite
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Bill,
  PatchedBill,
  Vote,
  VoteCounts,
} from '../models/index';
import {
    BillFromJSON,
    BillToJSON,
    PatchedBillFromJSON,
    PatchedBillToJSON,
    VoteFromJSON,
    VoteToJSON,
    VoteCountsFromJSON,
    VoteCountsToJSON,
} from '../models/index';

export interface BillsPartialUpdateRequest {
    id: number;
    patchedBill?: PatchedBill;
}

export interface BillsRetrieveRequest {
    id: number;
}

export interface BillsUpdateRequest {
    id: number;
    bill: Bill;
}

export interface BillsVoteCreateRequest {
    id: number;
    vote: Vote;
}

/**
 *
 */
export class BillsApi extends runtime.BaseAPI {

    /**
     */
    async billsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Bill>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/bills/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BillFromJSON));
    }

    /**
     */
    async billsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Bill>> {
        const response = await this.billsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async billsPartialUpdateRaw(requestParameters: BillsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bill>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling billsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/bills/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedBillToJSON(requestParameters.patchedBill),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillFromJSON(jsonValue));
    }

    /**
     */
    async billsPartialUpdate(requestParameters: BillsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bill> {
        const response = await this.billsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async billsRetrieveRaw(requestParameters: BillsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bill>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling billsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/bills/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillFromJSON(jsonValue));
    }

    /**
     */
    async billsRetrieve(requestParameters: BillsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bill> {
        const response = await this.billsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async billsUpdateRaw(requestParameters: BillsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bill>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling billsUpdate.');
        }

        if (requestParameters.bill === null || requestParameters.bill === undefined) {
            throw new runtime.RequiredError('bill','Required parameter requestParameters.bill was null or undefined when calling billsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/bills/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BillToJSON(requestParameters.bill),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillFromJSON(jsonValue));
    }

    /**
     */
    async billsUpdate(requestParameters: BillsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bill> {
        const response = await this.billsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async billsVoteCreateRaw(requestParameters: BillsVoteCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VoteCounts>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling billsVoteCreate.');
        }

        if (requestParameters.vote === null || requestParameters.vote === undefined) {
            throw new runtime.RequiredError('vote','Required parameter requestParameters.vote was null or undefined when calling billsVoteCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/bills/{id}/vote/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VoteToJSON(requestParameters.vote),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VoteCountsFromJSON(jsonValue));
    }

    /**
     */
    async billsVoteCreate(requestParameters: BillsVoteCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VoteCounts> {
        const response = await this.billsVoteCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
